{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?4a62","webpack:///./src/App.vue?786c","webpack:///./src/components/Controls.vue?b4ba","webpack:///./src/components/ControlGroup.vue?8558","webpack:///./src/components/UpdateItemModal.vue?48a5","webpack:///src/components/UpdateItemModal.vue","webpack:///./src/components/UpdateItemModal.vue?bbea","webpack:///./src/components/UpdateItemModal.vue?88fb","webpack:///src/components/ControlGroup.vue","webpack:///./src/components/ControlGroup.vue?e20e","webpack:///./src/components/ControlGroup.vue?9204","webpack:///src/components/Controls.vue","webpack:///./src/components/Controls.vue?a1ee","webpack:///./src/components/Controls.vue?b0e8","webpack:///./src/components/Chart.vue?4300","webpack:///src/components/Chart.vue","webpack:///./src/components/Chart.vue?57a5","webpack:///./src/components/Chart.vue?4875","webpack:///src/App.vue","webpack:///./src/App.vue?60d0","webpack:///./src/App.vue?fd02","webpack:///./src/store/index.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/components/UpdateItemModal.vue?12ce","webpack:///./src/components/Controls.vue?3462","webpack:///./data/input.xlsx","webpack:///./src/components/ControlGroup.vue?7e6b","webpack:///./src/components/Chart.vue?41ee"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","generateKey","objects","showGroup","on","$event","staticClass","activeObjects","correlations","staticRenderFns","_l","keys","groups","group","$set","updateObjects","updateShowGroup","_v","_s","$store","state","packageVersion","directives","rawName","class","expression","toggleShowItems","showItems","items","every","active","setActiveItems","coloredItems","updateItems","item","ID","setActiveItem","model","callback","$$v","updateItem","scopedSlots","_u","fn","ref","_g","_b","Name","Beschreibung","_e","style","color","dialog","setColor","props","methods","console","Farbe","component","VBtn","VCard","VCardActions","VCardText","VCardTitle","VCol","VColorPicker","VContainer","VDialog","VIcon","VRow","VSpacer","components","UpdateItemModal","VCheckbox","VTooltip","Ripple","reduce","ControlGroup","$emit","map","VChip","alert","mounted","drawChart","matrix","Array","fill","forEach","flow","size","innerHeight","margin","top","right","bottom","left","width","height","innerRadius","Math","min","outerRadius","d3","root","svg","append","attr","container","showAllChords","chord","customChordLayout","padding","sortSubgroups","sortChords","arc","g","selectAll","enter","highlightChords","each","text","customChordPathGenerator","grads","border","icon","content","hideAllChords","transition","duration","showAlert","hideAlert","Ï€","PI","relayout","numSeq","subgroups","chords","k","x","groupSums","subgroupIndex","x0","di","relatedIndexes","dj","v","a0","a1","index","subindex","startAngle","endAngle","relations","source","target","resort","a","b","arguments","sortGroups","radius","subgroup","p0","equals","curve","self","f","p1","r0","r1","deltaAngle","abs","mod","radialControlPointScale","pow","controlPoint1","controlPoint2","VAlert","Controls","Chart","computed","filter","from","to","quantity","VApp","VMain","VNavigationDrawer","Vue","use","Vuex","process","Store","Vuetify","theme","dark","themes","primary","secondary","background","config","productionTip","vuetify","store","render","h","App","$mount"],"mappings":"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","file":"js/app.7565ba16.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',[_c('v-navigation-drawer',{attrs:{\"color\":\"#766bf5\",\"width\":\"350px\",\"permanent\":\"\",\"absolute\":\"\"}},[_c('Controls',{key:_vm.generateKey(),attrs:{\"objects\":_vm.objects,\"showGroup\":_vm.showGroup},on:{\"update:objects\":function($event){_vm.objects=$event},\"update:showGroup\":function($event){_vm.showGroup=$event},\"update:show-group\":function($event){_vm.showGroup=$event}}})],1),_c('v-main',{staticClass:\"main\"},[_c('Chart',{key:_vm.generateKey(),attrs:{\"objects\":_vm.activeObjects,\"correlations\":_vm.correlations}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',{staticClass:\"my-5\"},[_vm._l((Object.keys(_vm.groups)),function(group){return _c('ControlGroup',{key:group,attrs:{\"name\":group,\"items\":_vm.groups[group],\"showItems\":_vm.showGroup === group},on:{\"update:items\":[function($event){return _vm.$set(_vm.groups, group, $event)},function($event){return _vm.updateObjects(_vm.groups[group])}],\"update:showItems\":function($event){return _vm.updateShowGroup(group)}}})}),_c('v-chip',{staticClass:\"version\"},[_vm._v(\" Version \"+_vm._s(this.$store.state.packageVersion)+\" \")])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',[_c('v-row',{staticClass:\"mb-1 item\"},[_c('v-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\",value:({ class: 'ripple' }),expression:\"{ class: 'ripple' }\"}],staticClass:\"button\",attrs:{\"icon\":\"\"},on:{\"click\":_vm.toggleShowItems}},[_c('v-icon',[_vm._v(\" \"+_vm._s(_vm.showItems ? \"mdi-minus-box\" : \"mdi-plus-box\")+\" \")])],1),_c('v-checkbox',{staticClass:\"checkbox\",attrs:{\"input-value\":_vm.items.every(function (i) { return i.active; })},on:{\"change\":function($event){return _vm.setActiveItems($event)}}}),_c('UpdateItemModal',{attrs:{\"items\":_vm.coloredItems},on:{\"update:items\":[function($event){_vm.coloredItems=$event},function($event){return _vm.updateItems(_vm.coloredItems)}]}}),_c('label',{staticClass:\"ml-2\"},[_vm._v(\" \"+_vm._s(_vm.name)+\" \")])],1),(_vm.showItems)?_c('v-container',{staticClass:\"pl-6\"},_vm._l((_vm.items),function(item){return _c('v-row',{key:item.ID,staticClass:\"item\"},[_c('v-checkbox',{staticClass:\"checkbox\",attrs:{\"input-value\":item.active},on:{\"change\":function($event){return _vm.setActiveItem(item.ID, $event)}},model:{value:(item.active),callback:function ($$v) {_vm.$set(item, \"active\", $$v)},expression:\"item.active\"}}),_c('UpdateItemModal',{attrs:{\"item\":item},on:{\"update:item\":[function($event){item=$event},function($event){return _vm.updateItem(item)}]}}),_c('v-tooltip',{attrs:{\"right\":\"\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('label',_vm._g(_vm._b({staticClass:\"ml-2\"},'label',attrs,false),on),[_vm._v(\" \"+_vm._s(item.Name)+\" \")])]}}],null,true)},[_c('span',[_vm._v(_vm._s(item.Beschreibung))])])],1)}),1):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-dialog',{attrs:{\"persistent\":\"\",\"width\":\"400px\"},scopedSlots:_vm._u([{key:\"activator\",fn:function(ref){\nvar on = ref.on;\nvar attrs = ref.attrs;\nreturn [_c('v-btn',_vm._g(_vm._b({staticClass:\"button\",attrs:{\"icon\":\"\"}},'v-btn',attrs,false),on),[_c('v-icon',{staticClass:\"icon\",style:({ 'background-color': _vm.color })},[_vm._v(\" mdi-pencil-box-outline \")])],1)]}}]),model:{value:(_vm.dialog),callback:function ($$v) {_vm.dialog=$$v},expression:\"dialog\"}},[_c('v-card',{attrs:{\"color\":\"#766bf5\"}},[_c('v-card-title',[_c('span',{staticClass:\"text-h5\"},[_vm._v(\"Bearbeiten\")])]),_c('v-card-text',[_c('v-container',[_c('v-row',[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-color-picker',{attrs:{\"dot-size\":\"25\",\"swatches-max-height\":\"200\",\"mode\":\"hexa\",\"light\":\"\"},model:{value:(_vm.color),callback:function ($$v) {_vm.color=$$v},expression:\"color\"}})],1)],1)],1)],1),_c('v-card-actions',[_c('v-spacer'),_c('v-btn',{attrs:{\"text\":\"\"},on:{\"click\":function($event){_vm.dialog = false}}},[_vm._v(\" SchlieÃŸen \")]),_c('v-btn',{attrs:{\"text\":\"\"},on:{\"click\":function($event){return _vm.setColor()}}},[_vm._v(\" Speichern \")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-dialog\n      v-model=\"dialog\"\n      persistent\n      width=\"400px\"\n  >\n    <template v-slot:activator=\"{ on, attrs }\">\n      <v-btn\n          icon\n          class=\"button\"\n          v-bind=\"attrs\"\n          v-on=\"on\"\n      >\n        <v-icon\n            class=\"icon\"\n            :style=\"{ 'background-color': color }\"\n        >\n          mdi-pencil-box-outline\n        </v-icon>\n      </v-btn>\n    </template>\n    <v-card\n        color=\"#766bf5\"\n    >\n      <v-card-title>\n        <span class=\"text-h5\">Bearbeiten</span>\n      </v-card-title>\n      <v-card-text>\n        <v-container>\n          <v-row>\n            <v-col cols=\"12\">\n              <v-color-picker\n                  v-model=\"color\"\n                  dot-size=\"25\"\n                  swatches-max-height=\"200\"\n                  mode=\"hexa\"\n                  light\n              ></v-color-picker>\n            </v-col>\n          </v-row>\n        </v-container>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn\n            text\n            @click=\"dialog = false\"\n        >\n          SchlieÃŸen\n        </v-btn>\n        <v-btn\n            text\n            @click=\"setColor()\"\n        >\n          Speichern\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<style>\n.button {\n  width: 24px !important;\n  height: 24px !important;\n}\n.icon {\n  height: 18px !important;\n  font-size: 24px !important;\n  width: 18px !important;\n  border-radius: 2px !important;\n}\n</style>\n\n<script>\n  export default {\n    props: [\"item\", \"items\"],\n\n    data() {\n      return {\n        dialog: false,\n        color: this.item ? this.item.Farbe : this.items[0].Farbe,\n      }\n    },\n\n    methods: {\n      setColor() {\n        this.dialog = false;\n        console.log(this.color);\n        if (this.item) {\n          const coloredItem = {...this.item, Farbe: this.color};\n          this.$emit(\"update:item\", coloredItem);\n        } else {\n          this.$emit(\"update:items\", this.items.map((i) => {\n            i.Farbe = this.color;\n            return i;\n          }));\n        }\n      },\n    }\n  }\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UpdateItemModal.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UpdateItemModal.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./UpdateItemModal.vue?vue&type=template&id=0bef0c02&\"\nimport script from \"./UpdateItemModal.vue?vue&type=script&lang=js&\"\nexport * from \"./UpdateItemModal.vue?vue&type=script&lang=js&\"\nimport style0 from \"./UpdateItemModal.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCardActions } from 'vuetify/lib/components/VCard';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VCardTitle } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VColorPicker } from 'vuetify/lib/components/VColorPicker';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VDialog } from 'vuetify/lib/components/VDialog';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VSpacer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VCard,VCardActions,VCardText,VCardTitle,VCol,VColorPicker,VContainer,VDialog,VIcon,VRow,VSpacer})\n","<template>\n  <v-container>\n    <v-row class=\"mb-1 item\">\n      <v-btn\n          icon\n          class=\"button\"\n          v-ripple=\"{ class: 'ripple' }\"\n          @click=\"toggleShowItems\"\n      >\n        <v-icon>\n          {{ showItems ? \"mdi-minus-box\" : \"mdi-plus-box\" }}\n        </v-icon>\n      </v-btn>\n      <v-checkbox\n          class=\"checkbox\"\n          :input-value=\"items.every((i) => i.active)\"\n          @change=\"setActiveItems($event)\"\n      />\n      <UpdateItemModal\n          :items.sync=\"coloredItems\"\n          v-on:update:items=\"updateItems(coloredItems)\"\n      />\n      <label class=\"ml-2\">\n        {{ name }}\n      </label>\n    </v-row>\n    <v-container\n        v-if=\"showItems\"\n        class=\"pl-6\"\n    >\n      <v-row\n        v-for=\"item in items\"\n        :key=\"item.ID\"\n        class=\"item\"\n      >\n        <v-checkbox\n            v-model=\"item.active\"\n            class=\"checkbox\"\n            :input-value=\"item.active\"\n            @change=\"setActiveItem(item.ID, $event)\"\n        />\n        <UpdateItemModal\n            :item.sync=\"item\"\n            v-on:update:item=\"updateItem(item)\"\n        />\n        <v-tooltip right>\n          <template v-slot:activator=\"{ on, attrs }\">\n            <label\n                v-bind=\"attrs\"\n                v-on=\"on\"\n                class=\"ml-2\"\n            >\n              {{ item.Name }}\n            </label>\n          </template>\n          <span>{{ item.Beschreibung }}</span>\n        </v-tooltip>\n      </v-row>\n    </v-container>\n  </v-container>\n</template>\n\n<style>\n.button {\n  width: 24px !important;\n  height: 24px !important;\n}\n.checkbox {\n  padding: 0 !important;\n  margin: 0 !important;\n  height: 24px;\n  width: 24px;\n}\n.checkbox .v-input--selection-controls__ripple {\n  height: 28px;\n  width: 28px;\n  top: calc(50% - 20px);\n  left: -10px;\n}\n.ripple {\n  opacity: 0.2;\n  color: currentColor;\n  width: 28px;\n  height: 28px;\n  position: absolute;\n}\n.item {\n\n}\n.item:hover label {\n  font-weight: bold;\n}\n\n</style>\n\n\n<script>\n  import UpdateItemModal from \"./UpdateItemModal\";\n\n  export default {\n    props: [\"name\", \"items\", \"showItems\"],\n\n    components: {\n      UpdateItemModal,\n    },\n\n    data() {\n      return {\n        coloredItems: [...this.items],\n      }\n    },\n\n    methods: {\n      toggleShowItems() {\n        this.$emit(\"update:showItems\", !this.showItems)\n      },\n      setActiveItems(value) {\n        this.$emit(\"update:items\", this.items.map((i) => {\n          i.active = value;\n          return i;\n        }))\n      },\n      setActiveItem(item, value) {\n        this.$emit(\"update:items\", this.items.map((i) => {\n          if (i.ID === item.ID) {\n            item.active = value;\n          }\n          return i;\n        }))\n      },\n      updateItems(items) {\n        this.$emit(\"update:items\", items);\n      },\n      updateItem(item) {\n        this.$emit(\"update:items\", this.items.map((i) => {\n          return i.ID === item.ID ? item : i;\n        }));\n      }\n    }\n  }\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControlGroup.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControlGroup.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ControlGroup.vue?vue&type=template&id=5a0b6d8c&\"\nimport script from \"./ControlGroup.vue?vue&type=script&lang=js&\"\nexport * from \"./ControlGroup.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ControlGroup.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCheckbox } from 'vuetify/lib/components/VCheckbox';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VRow } from 'vuetify/lib/components/VGrid';\nimport { VTooltip } from 'vuetify/lib/components/VTooltip';\ninstallComponents(component, {VBtn,VCheckbox,VContainer,VIcon,VRow,VTooltip})\n\n\n/* vuetify-loader */\nimport installDirectives from \"!../../node_modules/vuetify-loader/lib/runtime/installDirectives.js\"\nimport Ripple from 'vuetify/lib/directives/ripple'\ninstallDirectives(component, {Ripple})\n","<template>\n  <v-container class=\"my-5\">\n    <ControlGroup\n      :name=\"group\"\n      :items.sync=\"groups[group]\"\n      :showItems=\"showGroup === group\"\n      v-on:update:items=\"updateObjects(groups[group])\"\n      v-on:update:showItems=\"updateShowGroup(group)\"\n      v-for=\"group in Object.keys(groups)\" :key=\"group\"\n    />\n    <v-chip\n      class=\"version\"\n    >\n      Version {{ this.$store.state.packageVersion }}\n    </v-chip>\n  </v-container>\n</template>\n\n<style>\n.version {\n  position: fixed !important;\n  bottom: 20px;\n  left: 20px;\n}\n</style>\n\n<script>\nimport ControlGroup from \"./ControlGroup\";\n\nconst groupObjects = (objects, groupBy) => {\n  return objects.reduce(function (r, o) {\n    r[o[groupBy]] = r[o[groupBy]] || [];\n    r[o[groupBy]].push(o);\n    return r;\n  }, Object.create(null));\n}\n\nexport default {\n  props: [\"objects\", \"showGroup\"],\n\n  components: {\n    ControlGroup,\n  },\n\n  data: function () {\n    return {\n      groups: groupObjects(this.objects, \"Familie\"),\n    }\n  },\n\n  methods: {\n    updateObjects(objects) {\n      const newObjects = objects.reduce((a, o) => Object.assign(a, { [o.ID]: o }), {});\n      this.$emit(\"update:objects\", this.objects.map((o) => o.ID in newObjects ? newObjects[o.ID] : o));\n    },\n    updateShowGroup(group) {\n      this.$emit(\"update:showGroup\", group !== this.showGroup ? group : \"\");\n    },\n  },\n}\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Controls.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Controls.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Controls.vue?vue&type=template&id=2273cba8&\"\nimport script from \"./Controls.vue?vue&type=script&lang=js&\"\nexport * from \"./Controls.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Controls.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VChip } from 'vuetify/lib/components/VChip';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VChip,VContainer})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',[_c('div',{attrs:{\"id\":\"chart\"}},[_c('v-alert',{directives:[{name:\"show\",rawName:\"v-show\",value:(false),expression:\"false\"}],attrs:{\"dismissible\":\"\",\"width\":\"400\",\"color\":\"#766bf5\",\"id\":\"alert\",\"border\":\"left\",\"icon\":\"mdi-information\",\"colored-border\":\"\",\"light\":\"\",\"outlined\":\"\"},model:{value:(_vm.alert),callback:function ($$v) {_vm.alert=$$v},expression:\"alert\"}},[_c('span')])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-container>\n    <div id=\"chart\">\n      <v-alert\n          v-model=\"alert\"\n          dismissible\n          width=\"400\"\n          color=\"#766bf5\"\n          id=\"alert\"\n          border=\"left\"\n          icon=\"mdi-information\"\n          v-show=\"false\"\n          colored-border\n          light\n          outlined\n      >\n        <span></span>\n      </v-alert>\n\n    </div>\n\n  </v-container>\n</template>\n\n<style>\n#chart {\n  position: relative !important;\n}\n#alert {\n  position: absolute !important;\n  right: 0;\n  bottom: 0;\n}\n</style>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  props: [\"objects\", \"correlations\"],\n  data: () => ({\n  }),\n  mounted() {\n    this.drawChart();\n  },\n  methods: {\n    drawChart() {\n      var matrix = new Array(this.objects.length).fill().map(\n          () => new Array(this.objects.length).fill().map(() => 0)\n      );\n      \n      //Map list of data to matrix\n      this.correlations.forEach(function (flow) {\n        matrix[flow.to - 1][flow.from - 1] = flow.quantity;\n      });\n      \n      /*//////////////////////////////////////////////////////////\n      /////////////// Initiate Chord Diagram /////////////////////\n      //////////////////////////////////////////////////////////*/\n      var size = window.innerHeight - 40;\n      // var dr = 40; //radial translation for group names\n      // var dx = 20; //horizontal translation for group names\n      var margin = { top: 20, right: 20, bottom: 20, left: 20 };\n      var width = size - margin.left - margin.right;\n      var height = size - margin.top - margin.bottom;\n      var innerRadius = Math.min(width, height) * .39;\n      var outerRadius = innerRadius * 1.08;\n      \n      d3.select(\"svg\").remove();\n      var root = d3.select(\"#chart\");\n\n      //Generate tooltip already, but keep it invisible for now.\n      /*\n      var toolTip = root.append(\"div\")\n          .classed(\"tooltip\", true)\n          .style(\"opacity\", 0)\n          .style(\"position\", \"absolute\")\n          .style(\"text-align\", \"center\")\n          .style(\"padding\", \"6px\")\n          .style(\"font\", \"12px sans-serif\")\n          .style(\"color\", \"black\")\n          .style(\"background\", \"silver\")\n          .style(\"border\", \"1px solid gray\")\n          .style(\"border-radius\", \"8px\")\n          .style(\"pointer-events\", \"none\");\n      */\n      // var focusedChordGroupIndex = null;\n      \n      /*Initiate the SVG*/\n      //D3.js v3!\n      var svg = root.append(\"svg:svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom);\n      \n      var container = svg.append(\"g\")\n          .attr(\"transform\", \"translate(\" +\n              (margin.left + width / 2) + \",\" +\n              (margin.top + height / 2) + \")\")\n          .on(\"click\", function () {\n            showAllChords();\n          });\n      \n      var chord = customChordLayout()\n          .padding(0.04)\n          .sortSubgroups(d3.descending) /*sort the chords inside an arc from high to low*/\n          .sortChords(d3.ascending) /*which chord should be shown on top when chords cross. Now the largest chord is at the top*/\n          .matrix(matrix);\n      \n      /*//////////////////////////////////////////////////////////\n      ////////////////// Draw outer Arcs /////////////////////////\n      //////////////////////////////////////////////////////////*/\n      var arc = d3.svg.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius);\n      \n      var g = container.selectAll(\"g.group\")\n          .data(chord.groups)\n          .enter()\n          .append(\"svg:g\")\n          .attr(\"class\", (d) => \"group group-\" + this.objects[d.index].ID);\n      \n      g.append(\"svg:path\")\n          .attr(\"d\", arc)\n          .attr(\"id\", (d, i) => \"arc-\" + i)\n          .attr(\"class\", function (d) {\n            return \"arcs \" + d.relations.map((r) => \"arc-rel-\" + r).join(\" \");\n          })\n          .style(\"fill\", (d) => this.objects[d.index].Farbe)\n          .style(\"cursor\", \"pointer\")\n          // .style(\"stroke\", (d) => d3.rgb(this.objects[d.index].Farbe).brighter())\n          .on(\"mouseover\", function (d) { highlightChords(d.index) })\n          // .on(\"click\", function () { })\n          /*.on(\"mouseover\", function(d) {\n            showArcToolTip(d);\n          })\n          .on(\"mouseout\", function() { hideToolTip() });\n          */\n\n      g.append(\"text\")\n          .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })\n          .attr(\"dy\", \".35em\")\n          .attr(\"class\", function (d) {\n            return \"titles \" + d.relations.map((r) => \"title-rel-\" + r).join(\" \");\n          })\n          .attr(\"id\", (d, i) => \"title-\" + i)\n          .attr(\"text-anchor\", function(d) { return d.angle > Math.PI ? \"end\" : null; })\n          .attr(\"transform\", function(d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\"\n                + \"translate(\" + (outerRadius + 10) + \")\"\n                + (d.angle > Math.PI ? \"rotate(180)\" : \"\");\n          })\n          .style(\"font-size\", \"12px\")\n          .style(\"font-family\", \"'Roboto Condensed'\")\n          .style(\"font-weight\", \"400\")\n          .style(\"cursor\", \"pointer\")\n          .attr(\"fill\", \"#333\")\n          .text((d, i) => this.objects[i].Name)\n          .on(\"mouseover\", function (d) { highlightChords(d.index) });\n\n      /*//////////////////////////////////////////////////////////\n      //////////////// Initiate inner chords /////////////////////\n      //////////////////////////////////////////////////////////*/\n      // var chords = container.selectAll(\"path.chord\")\n      container.selectAll(\"path.chord\")\n          .data(chord.chords)\n          .enter()\n          .append(\"svg:path\")\n          .attr(\"class\", function (d) {\n            return \"chord chord-source-\" + d.source.index + \" chord-target-\" + d.target.index;\n          })\n          .attr(\"d\", customChordPathGenerator().radius(innerRadius))\n          //Change the fill to reference the unique gradient ID\n          //of the source-target combination\n          .style(\"fill\", function (d) {\n            return \"url(#chordGradient-\" + d.source.index + \"-\" + d.target.index + \")\";\n          })\n          // .style(\"stroke\", function (d) {\n          //   return \"url(#chordGradient-\" + d.source.index + \"-\" + d.target.index + \")\";\n          // })\n          .style(\"fill-opacity\", \"0.7\")\n          /*.on(\"mouseover\", function(d) {\n            if (focusedChordGroupIndex === null ||\n                d.source.index === focusedChordGroupIndex ||\n                d.target.index === focusedChordGroupIndex) {\n              if (focusedChordGroupIndex === null) {\n                d3.selectAll(\".chord\")\n                    .style(\"fill-opacity\", 0.2)\n                    .style(\"stroke-opacity\", 0.2);\n                d3.select(this).style(\"fill-opacity\", 1);\n              }\n              else {\n                d3.selectAll(\".chord.chord-source-\" + focusedChordGroupIndex + \", \" +\n                    \".chord.chord-target-\" + focusedChordGroupIndex)\n                    .style(\"fill-opacity\", 0.2)\n                    .style(\"stroke-opacity\", 0.2);\n                d3.select(this).style(\"fill-opacity\", 1);\n              }\n\n              // showChordToolTip(d);\n            }\n          })\n          .on(\"mouseout\", function() {\n            if (focusedChordGroupIndex === null) {\n              d3.selectAll(\".chord\")\n                  .style(\"fill-opacity\", 0.7)\n                  .style(\"stroke-opacity\", 1);\n            }\n            else {\n              d3.selectAll(\".chord.chord-source-\" + focusedChordGroupIndex + \", \" +\n                  \".chord.chord-target-\" + focusedChordGroupIndex)\n                  .style(\"fill-opacity\", 0.7)\n                  .style(\"stroke-opacity\", 1);\n            }\n\n            // hideToolTip();\n          });\n          */\n\n      //Cf https://www.visualcinnamon.com/2016/06/orientation-gradient-d3-chord-diagram\n      //Create a gradient definition for each chord\n      var grads = svg.append(\"defs\").selectAll(\"linearGradient\")\n          .data(chord.chords)\n          .enter().append(\"linearGradient\")\n          //Create a unique gradient id per chord: e.g. \"chordGradient-0-4\"\n          .attr(\"id\", function (d) {\n            return \"chordGradient-\" + d.source.index + \"-\" + d.target.index;\n          })\n          //Instead of the object bounding box, use the entire SVG for setting this.objects\n          //in pixel this.objects instead of percentages (which is more typical)\n          .attr(\"gradientUnits\", \"userSpaceOnUse\")\n          //The full mathematical formula to find the x and y this.objects\n          .attr(\"x1\", function (d) {\n            return innerRadius * Math.cos((d.source.endAngle - d.source.startAngle) / 2 +\n                d.source.startAngle - Math.PI / 2);\n          })\n          .attr(\"y1\", function (d) {\n            return innerRadius * Math.sin((d.source.endAngle - d.source.startAngle) / 2 +\n                d.source.startAngle - Math.PI / 2);\n          })\n          .attr(\"x2\", function (d) {\n            return innerRadius * Math.cos((d.target.endAngle - d.target.startAngle) / 2 +\n                d.target.startAngle - Math.PI / 2);\n          })\n          .attr(\"y2\", function (d) {\n            return innerRadius * Math.sin((d.target.endAngle - d.target.startAngle) / 2 +\n                d.target.startAngle - Math.PI / 2);\n          });\n\n      //Set the starting color (at 0%)\n      grads.append(\"stop\")\n          .attr(\"offset\", \"0%\")\n          .attr(\"stop-color\", (d) => this.objects[d.source.index].Farbe);\n\n      //Set the ending color (at 100%)\n      grads.append(\"stop\")\n          .attr(\"offset\", \"100%\")\n          .attr(\"stop-color\", (d) => this.objects[d.target.index].Farbe);\n      \n      \n      /*//////////////////////////////////////////////////////////\n          ////////////////// Initiate Ticks //////////////////////////\n          //////////////////////////////////////////////////////////*/\n      /*\n      var ticks = g.append(\"svg:g\")\n          .selectAll(\"g.ticks\")\n          .data(groupTicks)\n          .enter().append(\"svg:g\")\n          .attr(\"transform\", function (d) {\n            return \"rotate(\" + (d.angle * 180 / Math.PI - 90) + \")\"\n                + \"translate(\" + outerRadius + 40 + \",0)\";\n          });\n      */\n      /*Append the tick around the arcs*/\n      /*\n      ticks.append(\"svg:line\")\n          .attr(\"x1\", 1)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", 6)\n          .attr(\"y2\", 0)\n          .attr(\"class\", \"ticks\")\n          .style(\"stroke\", \"#333\")\n          .style(\"stroke-width\", \"1.5px\");\n      */\n      \n      /*Add the labels for the ticks*/\n      /*\n      ticks.append(\"svg:text\")\n          .attr(\"class\", \"tickLabels\")\n          .attr(\"x\", 12)\n          .attr(\"dy\", \".35em\")\n          .style(\"font-size\", \"10px\")\n          .style(\"font-family\", \"sans-serif\")\n          .attr(\"fill\", \"#333\")\n          .attr(\"transform\", function (d) {\n            return d.angle > Math.PI ? \"rotate(180)translate(-25)\" : null;\n          })\n          .style(\"text-anchor\", function (d) {\n            return d.angle > Math.PI ? \"end\" : null;\n          })\n          .text(function (d) { return d.label; });\n      */\n      /*//////////////////////////////////////////////////////////\n          ////////////////// Initiate Names //////////////////////////\n          //////////////////////////////////////////////////////////*/\n      /*g.append(\"svg:text\")\n          //.each(function (d) { d.angle = (d.startAngle + d.endAngle) / 2; })\n          .attr(\"x\", function (d) {\n            const angle = d.angle + ((3 * Math.PI) / 2);\n            return outerRadius * Math.cos(angle);\n          })\n          .attr(\"y\", function (d) {\n            const angle = d.angle + ((3 * Math.PI) / 2);\n            return outerRadius * Math.sin(angle);\n          })\n          .attr(\"x\", 6)\n          .attr(\"dy\", 15)\n          .append(\"textPath\")\n          .attr(\"xlink:href\", (d, i) => \"group-\" + i)\n          // .attr(\"text-anchor\", (d) => (d.angle < Math.PI ? \"start\" : \"end\"))\n          /*.attr(\"transform\", function(d) {\n            const angle = d.angle + ((3 * Math.PI) / 2);\n            return Math.sin(angle);\n          })\n\n          .attr(\"class\", \"titles\")\n          .style(\"font-size\", \"12px\")\n          .style(\"font-family\", \"sans-serif\")\n          .attr(\"fill\", \"#333\")\n          .text((d, i) => this.objects[i].Name);\n          /*\n          .attr(\"text-anchor\", function (d) {\n            return d.angle > Math.PI ? \"end\" : null;\n          })\n          .attr(\"transform\", function (d) {\n            var r = outerRadius + dr;\n            var angle = d.angle + ((3 *Math.PI) / 2);\n            var x = r * Math.cos(angle);\n            var y = r * Math.sin(angle);\n      \n            if (d.angle > Math.PI) {\n              x -= dx;\n            }\n            else {\n              x += dx;\n            }\n\n            return \"translate(\" + x + \", \" + y + \")\";\n          })\n          */\n        /*Lines from labels to arcs*/\n      /*part in radial direction*/\n      // this.g.append(\"line\")\n      /*\n      g.append(\"line\")\n          .attr(\"x1\", function (d) {\n            return outerRadius * Math.cos(d.angle + ((3 * Math.PI) / 2));\n          })\n          .attr(\"y1\", function (d) {\n            return outerRadius * Math.sin(d.angle + ((3 * Math.PI) / 2));\n          })\n          .attr(\"x2\", function (d) {\n            return (outerRadius + dr) * Math.cos(d.angle + ((3 * Math.PI) / 2));\n          })\n          .attr(\"y2\", function (d) {\n            return (outerRadius + dr) * Math.sin(d.angle + ((3 * Math.PI) / 2));\n          })\n          .style(\"stroke\", \"#333\")\n          .style(\"stroke-width\", \"0.5px\");\n      */\n      /*horizontal part*/\n      // this.g.append(\"line\")\n      /*\n      g.append(\"line\")\n          .attr(\"x1\", function (d) {\n            return (outerRadius + dr) * Math.cos(d.angle + ((3 * Math.PI) / 2));\n          })\n          .attr(\"y1\", function (d) {\n            return (outerRadius + dr) * Math.sin(d.angle + ((3 * Math.PI) / 2));\n          })\n          .attr(\"x2\", function (d) {\n            var x = (outerRadius + dr) * Math.cos(d.angle + ((3 * Math.PI) / 2));\n            if (d.angle > Math.PI) {\n              x -= dx - 5;\n            }\n            else {\n              x += dx - 5;\n            }\n            return x;\n          })\n          .attr(\"y2\", function (d) {\n            return (outerRadius + dr) * Math.sin(d.angle + ((3 * Math.PI) / 2));\n          })\n          .style(\"stroke\", \"#333\")\n          .style(\"stroke-width\", \"0.5px\");\n      */\n      /*//////////////////////////////////////////////////////////\n          ////////////////// Extra Functions /////////////////////////\n          //////////////////////////////////////////////////////////*/\n      \n      /*Returns an array of tick angles and labels, given a group*/\n      /*\n      function groupTicks(d) {\n        var anglePerPerson = (d.endAngle - d.startAngle) / d.value;\n        return d3.range(0, d.value, 100).map(function (v, i) {\n          return {\n            angle: v * anglePerPerson + d.startAngle,\n            label: i % 5 ? null : v //Each 5th tick has a label\n          };\n        });\n      }\n      */\n\n      //Update alert with description\n      const showAlert = (index) => {\n        const alert = document.getElementById(\"alert\");\n        const object = this.objects[index];\n        const border = alert.getElementsByClassName(\"v-alert__border\")[0];\n        const icon = alert.getElementsByClassName(\"mdi-close-circle\")[0];\n        border.style.borderColor = object.Farbe;\n        icon.style.color = object.Farbe;\n        icon.style.caretColor = object.Farbe;\n        var content = [\n          object.Beschreibung,\n          `<i>${object.Familie}</i>`,\n        ];\n        alert.getElementsByTagName('span')[0].innerHTML = content.join(\"<br>\");\n        alert.style.display = \"block\";\n      }\n\n      //Hide alert with description\n      const hideAlert = () => {\n        const alert = document.getElementById(\"alert\");\n        alert.style.display = \"none\";\n      }\n      \n      //Hides all chords except the chords connecting to the subgroup /\n      //location of the given index.\n      const highlightChords = (index) => {\n        //If this subgroup is already highlighted, toggle all chords back on.\n        // if (focusedChordGroupIndex === index) {\n        //   showAllChords();\n        //   return;\n        // }\n      \n        hideAllChords();\n      \n        //Show only the ones with source or target == index\n        d3.selectAll(`#title-${index}, .title-rel-${index}, #arc-${index}, .arc-rel-${index}, .chord-source-${index}, .chord-target-${index}`)\n            .transition().duration(500)\n            .style(\"fill-opacity\", \"1\");\n      \n        // focusedChordGroupIndex = index;\n\n        showAlert(index);\n      }\n      \n      function showAllChords() {\n        svg.selectAll(\"path.titles, path.arcs, path.chord\")\n            .transition().duration(500)\n            .style(\"fill-opacity\", \".7\");\n\n        hideAlert();\n        // focusedChordGroupIndex = null;\n      }\n      \n      function hideAllChords() {\n        svg.selectAll(\"text.titles, path.arcs, path.chord\")\n            .transition().duration(500)\n            .style(\"fill-opacity\", \".1\");\n      }\n      /*\n      const showChordToolTip = (chord) => {\n        var prompt = \"\";\n      \n        if (chord.source.index !== chord.target.index) {\n          prompt += chord.source.value + \" Kunden gingen von \" +\n              this.objects[chord.target.index].Name + \" nach \" +\n              this.objects[chord.source.index].Name + \".\";\n          prompt += \"<br>\";\n          prompt += chord.target.value + \" Kunden gingen von \" +\n              this.objects[chord.source.index].Name + \" nach \" +\n              this.objects[chord.target.index].Name + \".\";\n        }\n        else {\n          prompt += chord.source.value + \" Kunden blieben in \" +\n              this.objects[chord.source.index].Name + \".\";\n        }\n      \n        toolTip\n            .style(\"opacity\", 1)\n            .html(prompt)\n            .style(\"left\", d3.event.pageX - toolTip.node().getBoundingClientRect().width / 2 + \"px\")\n            .style(\"top\", (d3.event.pageY - 50) + \"px\");\n      }\n      \n      const showArcToolTip = (arc) => {\n        var prompt = Math.round(arc.value) + \" Kunden befinden sich in \" + this.objects[arc.index].Name + \".\";\n      \n        toolTip\n            .style(\"opacity\", 1)\n            .html(prompt)\n            .style(\"left\", d3.event.pageX - toolTip.node().getBoundingClientRect().width / 2 + \"px\")\n            .style(\"top\", (d3.event.pageY - 30) + \"px\");\n      }\n      \n      function hideToolTip() {\n        toolTip.style(\"opacity\", 0);\n      }\n\n      */\n      \n      ////////////////////////////////////////////////////////////\n      //////////// Custom Chord Layout Function //////////////////\n      /////// Places the Chords in the visually best order ///////\n      ///////////////// to reduce overlap ////////////////////////\n      ////////////////////////////////////////////////////////////\n      //////// Slightly adjusted by Nadieh Bremer ////////////////\n      //////////////// VisualCinnamon.com ////////////////////////\n      ////////////////////////////////////////////////////////////\n      ////// Original from the d3.layout.chord() function ////////\n      ///////////////// from the d3.js library ///////////////////\n      //////////////// Created by Mike Bostock ///////////////////\n      ////////////////////////////////////////////////////////////\n      function customChordLayout() {\n        // var Îµ = 1e-6, Îµ2 = Îµ * Îµ, Ï€ = Math.PI, Ï„ = 2 * Ï€, Ï„Îµ = Ï„ - Îµ, halfÏ€ = Ï€ / 2, d3_radians = Ï€ / 180, d3_degrees = 180 / Ï€;\n        var Ï€ = Math.PI, Ï„ = 2 * Ï€;\n        var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n        function relayout() {\n          var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n          var numSeq;\n          chords = [];\n          groups = [];\n          k = 0;\n          i = -1;\n      \n          while (++i < n) {\n            x = 0;\n            j = -1;\n            numSeq = [];\n            while (++j < n) {\n              x += matrix[i][j] || matrix[j][i];\n            }\n            groupSums.push(x);\n            //////////////////////////////////////\n            ////////////// New part //////////////\n            //////////////////////////////////////\n            for (var m = 0; m < n; m++) {\n              numSeq[m] = (n + (i - 1) - m) % n;\n            }\n            subgroupIndex.push(numSeq);\n            //////////////////////////////////////\n            //////////  End new part /////////////\n            //////////////////////////////////////\n            k += x;\n          }//while\n      \n          k = (Ï„ - padding * n) / k;\n          x = 0;\n          i = -1;\n          while (++i < n) {\n            x0 = x;\n            j = -1;\n            var di = 0;\n            var relatedIndexes = [];\n            while (++j < n) {\n              di = groupIndex[i];\n              var dj = subgroupIndex[di][j];\n              var v = matrix[di][dj] || matrix[dj][di];\n              var a0 = x;\n              var a1 = x += v * k;\n              subgroups[di + \"-\" + dj] = {\n                index: di,\n                subindex: dj,\n                startAngle: a0,\n                endAngle: a1,\n                value: v\n              };\n              (v || matrix[dj][di]) && relatedIndexes.push(dj);\n            }//while\n      \n            groups[di] = {\n              index: di,\n              startAngle: x0,\n              endAngle: x,\n              value: (x - x0) / k,\n              relations: relatedIndexes,\n            };\n            x += padding;\n          }//while\n      \n          i = -1;\n          while (++i < n) {\n            j = i - 1;\n            while (++j < n) {\n              var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n              if (source.value || target.value) {\n                chords.push(source.value < target.value ? {\n                  source: target,\n                  target: source\n                } : {\n                  source: source,\n                  target: target\n                });\n              }//if\n            }//while\n          }//while\n          if (sortChords) resort();\n        }//function relayout\n      \n        function resort() {\n          chords.sort(function (a, b) {\n            return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n          });\n        }\n        chord.matrix = function (x) {\n          if (!arguments.length) return matrix;\n          n = (matrix = x) && matrix.length;\n          chords = groups = null;\n          return chord;\n        };\n        chord.padding = function (x) {\n          if (!arguments.length) return padding;\n          padding = x;\n          chords = groups = null;\n          return chord;\n        };\n        chord.sortGroups = function (x) {\n          if (!arguments.length) return sortGroups;\n          sortGroups = x;\n          chords = groups = null;\n          return chord;\n        };\n        chord.sortSubgroups = function (x) {\n          if (!arguments.length) return sortSubgroups;\n          sortSubgroups = x;\n          chords = null;\n          return chord;\n        };\n        chord.sortChords = function (x) {\n          if (!arguments.length) return sortChords;\n          sortChords = x;\n          if (chords) resort();\n          return chord;\n        };\n        chord.chords = function () {\n          if (!chords) relayout();\n          return chords;\n        };\n        chord.groups = function () {\n          if (!groups) relayout();\n          return groups;\n        };\n        return chord;\n      }\n      \n      ////////////////////////////////////////////////////////////\n      //////////// Custom Chord Path Generator ///////////////////\n      ///////// Uses cubic bezier curves with quadratic //////////\n      /////// spread of control points to minimise overlap ///////\n      ////////////////// of adjacent chords. /////////////////////\n      ////////////////////////////////////////////////////////////\n      /////// Original from the d3.svg.chord() function //////////\n      ///////////////// from the d3.js library ///////////////////\n      //////////////// Created by Mike Bostock ///////////////////\n      ////////////////////////////////////////////////////////////\n      function customChordPathGenerator() {\n        var source = function (d) {\n          return d.source;\n        };\n        var target = function (d) {\n          return d.target;\n        };\n        var radius = function (d) {\n          return d.radius;\n        };\n        var startAngle = function (d) {\n          return d.startAngle;\n        };\n        var endAngle = function (d) {\n          return d.endAngle;\n        };\n\n        function chord(d, i) {\n          var s = subgroup(this, source, d, i),\n              t = subgroup(this, target, d, i);\n\n          return \"M\" + s.p0\n              + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t)\n                  ? curve(s.r, s.p1, s.a1, s.r, s.p0, s.a0)\n                  : curve(s.r, s.p1, s.a1, t.r, t.p0, t.a0)\n                  + arc(t.r, t.p1, t.a1 - t.a0)\n                  + curve(t.r, t.p1, t.a1, s.r, s.p0, s.a0))\n              + \"Z\";\n        }\n\n        function subgroup(self, f, d, i) {\n          var subgroup = f.call(self, d, i),\n              r = radius.call(self, subgroup, i),\n              a0 = startAngle.call(self, subgroup, i) - (Math.PI / 2),\n              a1 = endAngle.call(self, subgroup, i) - (Math.PI / 2);\n\n          return {\n            r: r,\n            a0: a0,\n            a1: a1,\n            p0: [r * Math.cos(a0), r * Math.sin(a0)],\n            p1: [r * Math.cos(a1), r * Math.sin(a1)]\n          };\n        }\n\n        function equals(a, b) {\n          return a.a0 === b.a0 && a.a1 === b.a1;\n        }\n\n        function arc(r, p, a) {\n          return \"A\" + r + \",\" + r + \" 0 \" + +(a > Math.PI) + \",1 \" + p;\n        }\n\n        function curve(r0, p0, a0, r1, p1, a1) {\n          var deltaAngle = Math.abs(mod((a1 - a0 + Math.PI), (2 * Math.PI)) - Math.PI);\n          var radialControlPointScale = Math.pow((Math.PI - deltaAngle) / Math.PI, 2) * 0.9;\n          var controlPoint1 = [p0[0] * radialControlPointScale, p0[1] * radialControlPointScale];\n          var controlPoint2 = [p1[0] * radialControlPointScale, p1[1] * radialControlPointScale];\n          return \"C \" + controlPoint1[0] + \" \" + controlPoint1[1] + \", \" +\n              controlPoint2[0] + \" \" + controlPoint2[1] + \", \" +\n              p1[0] + \" \" + p1[1];\n        }\n\n        function mod(a, n) {\n          return (a % n + n) % n;\n        }\n\n        chord.radius = function (v) {\n          if (!arguments.length) return radius;\n          radius = typeof v === \"function\" ? v : function () {\n            return v;\n          };\n          return chord;\n        };\n\n        chord.source = function (v) {\n          if (!arguments.length) return source;\n          source = typeof v === \"function\" ? v : function () {\n            return v;\n          };\n          return chord;\n        };\n\n        chord.target = function (v) {\n          if (!arguments.length) return target;\n          target = typeof v === \"function\" ? v : function () {\n            return v;\n          };\n          return chord;\n        };\n\n        chord.startAngle = function (v) {\n          if (!arguments.length) return startAngle;\n          startAngle = typeof v === \"function\" ? v : function () {\n            return v;\n          };\n          return chord;\n        };\n\n        chord.endAngle = function (v) {\n          if (!arguments.length) return endAngle;\n          endAngle = typeof v === \"function\" ? v : function () {\n            return v;\n          };\n          return chord;\n        };\n\n        return chord;\n      }\n    }\n  }\n}\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Chart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Chart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Chart.vue?vue&type=template&id=04689e57&\"\nimport script from \"./Chart.vue?vue&type=script&lang=js&\"\nexport * from \"./Chart.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Chart.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAlert } from 'vuetify/lib/components/VAlert';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VAlert,VContainer})\n","<template>\n  <v-app>\n    <v-navigation-drawer\n        color=\"#766bf5\"\n        width=\"350px\"\n        permanent\n        absolute\n    >\n      <Controls\n        :objects.sync=\"objects\"\n        :showGroup.sync=\"showGroup\"\n        :key=\"generateKey()\"\n      />\n    </v-navigation-drawer>\n    <v-main\n      class=\"main\"\n    >\n      <Chart\n        :objects=\"activeObjects\"\n        :correlations=\"correlations\"\n        :key=\"generateKey()\"\n      />\n    </v-main>\n  </v-app>\n</template>\n\n<style>\n.v-application {\n  background-color: var(--v-background-base) !important;\n}\n.main {\n  padding-left: 400px !important;\n}\n</style>\n\n<script>\nimport Controls from './components/Controls';\nimport Chart from './components/Chart';\nimport * as XLSX from \"xlsx\";\nimport * as input_file from \"../data/input.xlsx\";\n\nconst getObjects = (data) => {\n  return data.map((o) => {\n    o.active = true;\n    return o;\n  })\n}\n\nconst workbook = XLSX.read(input_file);\nconst objectsData = XLSX.utils.sheet_to_json(workbook.Sheets[\"Objekte\"]);\nconst correlationsData = XLSX.utils.sheet_to_json(workbook.Sheets[\"Korrelationen\"]);\nconst objects = getObjects(objectsData);\n\nexport default {\n  name: 'App',\n\n  components: {\n    Controls,\n    Chart,\n  },\n\n  data: () => {\n    return {\n      objects,\n      showGroup: \"\",\n    }\n  },\n\n  computed: {\n    activeObjects: function () {\n      return this.objects.filter((o) => o.active);\n    },\n    correlations: function () {\n      const correlations = [];\n      for (const [i, object] of this.activeObjects.entries()) {\n        if (correlationsData.length <= object.ID) continue;\n        for (const [j, relation] of this.activeObjects.entries()) {\n          const quantity = correlationsData[object.ID][relation.ID];\n          if (typeof quantity !== \"number\") continue;\n          correlations.push({\n            from: i,\n            to: j,\n            quantity\n          });\n        }\n      }\n      return correlations;\n    }\n  },\n\n  methods: {\n    generateKey() {\n      const colors = this.activeObjects.map((o) => o.Farbe).join(\"\");\n      return `${this.activeObjects.length}-${colors}`;\n    }\n  }\n};\n</script>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--13-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=340063ec&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\nimport { VMain } from 'vuetify/lib/components/VMain';\nimport { VNavigationDrawer } from 'vuetify/lib/components/VNavigationDrawer';\ninstallComponents(component, {VApp,VMain,VNavigationDrawer})\n","import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nconst state = {\n  packageVersion: process.env.PACKAGE_VERSION || '0',\n}\n\nexport default new Vuex.Store({\n  state\n})\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib/framework';\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n  theme: {\n    dark: true,\n    themes: {\n      dark: {\n        primary: \"#ffffff\",\n        secondary: \"#ffffff\",\n        background: \"#ffffff\",\n      }\n    }\n  },\n});\n","import Vue from 'vue';\nimport App from './App.vue';\nimport store from './store';\nimport vuetify from './plugins/vuetify';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  vuetify,\n  store,\n  render: h => h(App)\n}).$mount('#app');\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./UpdateItemModal.vue?vue&type=style&index=0&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Controls.vue?vue&type=style&index=0&lang=css&\"","module.exports = require(\"../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"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\")","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ControlGroup.vue?vue&type=style&index=0&lang=css&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Chart.vue?vue&type=style&index=0&lang=css&\""],"sourceRoot":""}